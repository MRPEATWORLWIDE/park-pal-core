import { Navigation } from '#components/Navigation'
import { getProductByCode, getProductVariants, LocalizedProduct, LocalizedVariant, products } from '#data/products'
import { serverSideTranslations } from '#i18n/serverSideTranslations'
import { withLocalePaths } from '#i18n/withLocalePaths'
import { basePath } from '#next.config'
import type { GetStaticPaths, GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useMemo } from 'react'
import { useImmer } from 'use-immer';
import { useRouter } from 'next/router'
import uniqBy from 'lodash/uniqBy'


type Query = {
  locale: string
  code: string
}

type Props = {
  product: LocalizedProduct
  variants: LocalizedProduct[]
}

const filterPrevious = (current: LocalizedVariant[], variants: LocalizedVariant[], index: number, memo = true): boolean => {
  if (index === 0) {
    return memo
  }

  return (memo =
    current[index - 1] &&
    variants[index - 1].value ===
    current[index - 1].value &&
    filterPrevious(current, variants, index - 1))
};

const VariantsSelector: React.FC<{ variants: LocalizedProduct[], initialSelection: LocalizedVariant[] }> = ({ variants: productVariants, initialSelection }) => {
  const router = useRouter()
  const [currentVariant, setCurrent] = useImmer<LocalizedVariant[]>(initialSelection);

  const variants = productVariants.map(v => v.variant)

  const options = new Array(variants[0].length).fill(undefined).map((_, index) => {
    return uniqBy(
      variants
        .filter((variants) => filterPrevious(currentVariant, variants, index))
        .map((p) => p[index]),
      "value"
    )
  });

  useEffect(() => {
    currentVariant.forEach((c, index) => {
      const exists =
        options[index].find((option) => {
          return option.value === c.value
        }) !== undefined

      if (!exists) {
        setCurrent((draft) => {
          draft[index] = options[index][0]
        })
      }
    })
  }, [currentVariant, setCurrent, options]);

  const currentProductCode = useMemo(() => productVariants.find(v => JSON.stringify(v.variant.map(v=>v.value)) === JSON.stringify(currentVariant.map(v => v.value)))?.code, [productVariants, currentVariant])

  useEffect(() => {
    if (currentProductCode && router.query.code !== currentProductCode) {
      router.push({
        query: {
          ...router.query,
          code: currentProductCode
        }
      })
    }
  }, [router, currentProductCode])

  return (
    <div>
      {
        options.map((option, index) => (
          <p key={index}>
            {option.map((o) => (
              <span
                style={{
                  borderBottom:
                    currentVariant[index]?.value === o.value ? "1px solid" : "none"
                }}
                key={o.value}
                onClick={() => {
                  setCurrent((draft) => {
                    draft[index] = o
                  })
                }}
              >
                &nbsp;{o.label}&nbsp;
              </span>
            ))}
          </p>
        ))
      }
    </div>
  )
}

const ProductDetailPage: NextPage<Props> = ({ product, variants }) => {

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={basePath + '/favicon.ico'} />
      </Head>

      <Navigation />

      <p>{product.code}</p>
      <img width="300" src={product.primaryImage} alt={product.name} />
      <p>{product.name}</p>
      <p>{product.description}</p>
      <pre>{JSON.stringify(product.variant, undefined, 4)}</pre>

      <VariantsSelector variants={variants} initialSelection={product.variant} />
    </div>
  )
}

export const getStaticPaths: GetStaticPaths<Query> = () => {
  return withLocalePaths({
    paths: products.map(product => ({
      params: {
        code: product.code
      }
    })),
    fallback: false
  })
}

export const getStaticProps: GetStaticProps<Props, Query> = async ({ params }) => {
  const { code, locale } = params!

  const product = getProductByCode(code, locale);
  const variants = getProductVariants(product, locale)

  return {
    props: {
      product,
      variants,
      ...(await serverSideTranslations(locale))
    }
  }
}

export default ProductDetailPage
